apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

// Don't need these task, so disabling them. Makes it possible to avoid
// declaring a single application main class.
startScripts.enabled = false
run.enabled = false

// Also don't need the regular application distribution packages since
// this is just a set of samples. So disabling to make the build output
// cleaner
distTar.enabled=false
distZip.enabled=false

applicationName = 'solace-samples-semp'
version = ''

eclipse {
  project {
    name = 'semp.java'
  }
}

idea {
  project {
    outputFile = new File('.', 'semp.java.ipr')
  }
  module {
    name = 'semp.java'
  }
  workspace {
//    outputFile = new File('.', 'semp.java.iws')
  }
}

jar {
	baseName = 'solace-samples-semp'
    version =  version
    manifest {
        attributes 'Implementation-Title': 'Solace Getting Started Samples',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Swagger Java Client API Dependencies
    compile("io.swagger:swagger-annotations:1.5.9")
    compile("com.squareup.okhttp:okhttp:2.7.5")
    compile("com.squareup.okhttp:logging-interceptor:2.7.5")
    compile("com.google.code.gson:gson:2.6.2")
    compile("joda-time:joda-time:2.9.3")
}

task createAllStartScripts() << {
     // just a placeholder
}
  def scripts = [ 'basicOperationsSample':'com.solace.samples.BasicOperationsSample',
                  'manageVPN':'com.solace.samples.ManageVPN'  ]
  scripts.each() { scriptName, className ->
          def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
      applicationDistribution.into("bin") {
            from(t)
            fileMode = 0755
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    createAllStartScripts.dependsOn(t)
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist