apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

// Don't need these task, so disabling them. Makes it possible to avoid
// declaring a single application main class.
startScripts.enabled = false
run.enabled = false

// Also don't need the regular application distribution packages since
// this is just a set of samples. So disabling to make the build output
// cleaner
distTar.enabled=false
distZip.enabled=false

applicationName = 'solace-samples-semp'
version = ''

eclipse {
  project {
    name = 'semp.java'
  }
}

idea {
  project {
    outputFile = new File('.', 'semp.java.ipr')
  }
  module {
    name = 'semp.java'
  }
  workspace {
//    outputFile = new File('.', 'semp.java.iws')
  }
}

jar {
	baseName = 'solace-samples-semp'
    version =  version
    manifest {
        attributes 'Implementation-Title': 'Solace Getting Started Samples',
                   'Implementation-Version': version
    }
}

configurations {
    tool
}

repositories {
    mavenCentral()
}

ext {
    swagger_annotations_version = "1.5.8"
    jackson_version = "2.7.5"
    jersey_version = "2.22.2"
    junit_version = "4.12"
}

dependencies {
    // Swagger Java Client API Dependencies
    compile "io.swagger:swagger-annotations:$swagger_annotations_version"
    compile "org.glassfish.jersey.core:jersey-client:$jersey_version"
    compile "org.glassfish.jersey.media:jersey-media-multipart:$jersey_version"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    compile "com.brsanthu:migbase64:2.2"
    compile("com.google.code.gson:gson:2.6.2")
    testCompile "junit:junit:$junit_version"
    tool "io.swagger:swagger-codegen-cli:2.2.2"
}

task createAllStartScripts() << {
     // just a placeholder
}
  def scripts = [ 'basicOperationsSample':'com.solace.samples.BasicOperationsSample',
                  'manageVPN':'com.solace.samples.ManageVPN'  ]
  scripts.each() { scriptName, className ->
          def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
      applicationDistribution.into("bin") {
            from(t)
            fileMode = 0755
			duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    createAllStartScripts.dependsOn(t)
}

installDist {
    destinationDir = new File(project.buildDir, 'staged')
}

assemble.dependsOn installDist

task buildSempLib << {
    copy {
        from configurations.tool
        into new File("..").absolutePath
    }
    def f = new File('../swagger.yaml')
    if (!f.exists()) {
        new URL('https://products.solace.com/download/PUBSUB_SEMPV2_SCHEMA_YAML').withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    delete "workdir"; (new File("workdir")).mkdirs()
    javaexec {
        main="-jar";
        classpath configurations.tool
        workingDir = "workdir"
        args = [
                "../../swagger-codegen-cli-2.2.2.jar",
                "generate",
                "-l",
                "java",
                "-i",
                "../../swagger.yaml",
                "-c",
                "../codegen_config_java.json"
                ]
    }
    // Cleanup
    delete "workdir/gradle", "workdir/src/test"
    delete fileTree("workdir") {
        include "*"
    }
    copy {
        from "workdir"
        into "."
    }
    delete "workdir"
}

task sempLibPresent {
    def f = new File('docs')   // we take the presence of the docs directory as an evidence that the library has been built
    if (!f.exists()) {
        buildSempLib.execute()
    }
}

assemble.dependsOn sempLibPresent
